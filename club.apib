FORMAT: 1A
HOST: https://api.palms.tennis/v1

# Palms Club API

Документация описывает интеграцию клубов с Palms. Вы можете интегрировать CRM клуба для получения бронирований из Palms.

## Общая информация

1. Мы строим REST API. Все общение с Palms API проходит через HTTP в JSON формате. Мы стараемся следовать REST, но следуем common-sense и отходим от REST, когда это имеет смысл.
2. В каждом ответе, при котором меняется, создается модель мы возвращаем обновленное значение в ответе.


## Среды

| Среда | URL | Когда использовать |
| --- | --- | --- |
| Dev | https://api-dev.palms.tennis | Для разработки. Может очищаться и валиться. Она для внутренней работы. Лучше не использовать для интеграции |
| Test | https://api-test.palms.tennis | Тестовая среда. Тоже может очищаться и валиться. Мы ее используем как тестовый полигон перед продакшеном. Если нужно провести миграцию на проде, то мы сначала ее пробуем накатывать их на тесте, а потом, если все прошло гладко, применяем их для продакшена |
| Prod | https://api.palms.tennis | Боевой сервер. Данные с продакшена используются в приложении и показываются клиентам. Мы максимально аккуратны с этой средой, она надежна и стабильна. |

## Стандартные HTTP коды ответов

| Код | Значение |
| --- | --- |
| 200 | Все ок, ответ успешный |
| 401 | Запрос не прошел авторизацию. Проверьте ключи доступа |
| 422 | Ошибки валидации как данных, так и логические |
| 404 | Модель или роут не найден |

## Авторизация

Внешние клиенты авторизацию по API Key. Чтобы его получить - обратитесь в поддержку [hello@palms.tennis](mailto:hello@palms.tennis).

Для авторизации запроса, нужно передать хедер Authorization с указанием API Key.

Например,
```
Authorization: Bearer XXXXX
```

где `XXXXX` - ваш API Key

## Пейджинация

Большинство роутов получения коллекций обьектов имеют пейджинацию. Пейджинация страничная, включает два URL параметра:
- `page_size` (number) - количество элементов на страницы
- `page` (number) - номер страницы

Например

```
https://api.palms.tennis/club/slots?page=1&page_size=10
```

## Ошибки

### Ошибка валидации

```
{
  "error": {
    "message": "Validation failed",
    "type": "validation",
    "validations": {} // ответы валидаторов для дебага
  }
}
```

### Ошибка авторизации

```
{
  "error": {
    "message": "You are not authorized for this action",
    "type": "authorization_error"
  }
}
```

### Другие ошибки

```
{
  "error": {
    "message": "Error message. Long readable text",
    "type": "error_type"
  }
}
```

## Форматы данных

### Даты

Даты хранятся в формате [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) c указанием времени и часового пояса.

Например, `2019-05-29T15:15:43+00:00`

### Валюты

Валюты мы храним в формате [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) в трех символьной строке.

Например, `USD`, `UAH`, или `EUR`.

### Суммы

Суммы мы храним целым числом без разделителя.

Например, сумма 5 грн 40 коп. будет храниться как `540`

### Номера телефонов

Согласно стандарту [E.164](https://en.wikipedia.org/wiki/E.164) в международном формате.

Например, `+380932345678`

# Group Типы помещения

## Получить список [GET /club/area-types/{?page_size,page}]

+ Parameters
  + page_size (number, optional) - количество записей на странице
  + page (number, optional) - номер страницы

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__AreaTypes)


## Получить модель [GET /club/area-types/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор корта

+ Request (application/json)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__AreaType)


# Group Корты

## Получить список [GET /club/areas{?page_size,page}]

+ Parameters
  + page_size (number, optional) - количество записей на странице
  + page (number, optional) - номер страницы

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__Areas)

## Получить модель [GET /club/areas/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор корта

+ Request (application/json)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__Area)


## Создать модель [POST /club/areas/]

+ Request (application/json)
    + Attributes (Area_Create_Request)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__Area)

## Обновить модель [PATCH /club/areas/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор корта

+ Request (application/json)
    + Attributes (Area_Patch_Request)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__Area)

## Удалить модель [DELETE /club/areas/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор корта

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 204 (application/json)


# Group Клуб

## Получить информацию о клубе [GET /club/me]

+ Request (application/json)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```
+ Response 200 (application/json)
    + Attributes (Response__Club)

# Group Игроки

**Игрок** - это человек, который хотя бы раз бронировал время в клубе.

## Поиск игроков [GET /club/users{?search,page,page_size}]

Только по клиентам клуба

+ Parameters
  + page_size: 10 (number, optional) - количество записей на странице
  + page: 1 (number, optional) - номер страницы
  + search: `380` (string, optional) - строка для поиска. поиск по номеру телефону или имени

+ Request (application/json)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```
+ Response 200 (application/json)
    + Attributes (Response__Users)

## Поиск игроков [POST /club/users-palms/{phone_number}]

Только по клиентам клуба

+ Parameters
  + page_size: 10 (number, optional) - количество записей на странице
  + page: 1 (number, optional) - номер страницы
  + phone_number: `+380932685446` (string, optional) - номер телефона

+ Request (application/json)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```
+ Response 200 (application/json)
    + Attributes (Response__User)

## Создать модель [POST /club/users]

+ Request (application/json)
    + Attributes (User_Create_Request)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```
+ Response 201 (application/json)
    + Attributes (Response__User)

## Получить модель [GET /club/users/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор игрока

+ Request (application/json)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__User)

## Обновить модель [PATCH /club/users/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор игрока

+ Request (application/json)
    + Attributes (User_Patch_Request)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__User)

## Удалить модель [DELETE /club/users/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор игрока

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 204 (application/json)

## Импорт из CSV [POST /club/users/import]

+ Request
    + Headers

        ```
        Authorization: Bearer XXXXX
        Content-Type: multipart/form-data, boundary=AaB03x
        Content-Disposition: form-data; name="file"; filename="*.csv"
        ```

+ Response 200 (application/json)
    + Attributes (Response__User_Import)


# Group Тренеры

## Поиск тренеров [GET /club/coaches{?search,page,page_size}]

+ Parameters
  + page_size: 10 (number, optional) - количество записей на странице
  + page: 1 (number, optional) - номер страницы
  + search: `380` (string, optional) - строка для поиска. поиск по номеру телефону или имени

+ Request (application/json)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```
+ Response 200 (application/json)
    + Attributes (Response__Users)


## Создать модель [POST /club/coaches]

+ Request (application/json)
    + Attributes (User_Create_Request)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```
+ Response 201 (application/json)
    + Attributes (Response__User)

## Получить модель [GET /club/coaches/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор игрока

+ Request (application/json)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__User)

## Обновить модель [PATCH /club/coaches/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор игрока

+ Request (application/json)
    + Attributes (User_Patch_Request)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__User)

## Удалить модель [DELETE /club/coaches/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор тренера

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 204 (application/json)

# Group Слоты бронирования

**Слот** - это ячейка времени на корте, которую пользователь может забронировать для игры.

### Статусы

Слот бронирования может иметь ряд статусов.

| Статус | Описание |
|---|---|
| `AVAILABLE` | слот доступен для бронирования в Palms |
| `BOOKED` | слот забронирован через Palms |
| `DISABLED` | слот недоступен для бронирования |

Пользователи Palms будут видеть слоты со статусом `AVAILABLE`.

Чтобы убрать слот из выдачи, нужно изменить статус слота на `DISABLED`.

Статус `BOOKED` ставится автоматически, когда пользователь бронирует слот через Palms.

## Получить список [GET /club/slots{?page_size,page,date_from,date_to,status,area_type_id}]

+ Parameters
  + page_size: 10 (number, optional) - количество записей на странице
  + page: 1 (number, optional) - номер страницы
  + date_from: `2019-05-12` (string, optional) - вернуть слоты начиная с этой даты
  + date_to: `2019-05-13` (string, optional) - вернуть слоты заканчивая этой датой
  + status: `BOOKED` (string, optional) - статус слота
  + area_type_id: 1 (number, required) - тип помещения

+ Request (application/json)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```
+ Response 200 (application/json)
    + Attributes (Response__Slots)

## Создать модель [POST /club/slots]

+ Request (application/json)
    + Attributes (Slot_Create_Request)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```
+ Response 201 (application/json)
    + Attributes (Response__Slot)

## Получить модель [GET /club/slots/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор слота бронирования

+ Request (application/json)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__Slot)

## Обновить модель [PATCH /club/slots/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор слота бронирования

+ Request (application/json)
    + Attributes (Slot_Update_Request)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__Slot)


## Удалить модель [DELETE /club/slots/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор слота

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 204 (application/json)

# Group Бронирование

### Статусы бронирования

| Статус | Финальный | Обязательное указание причины | Описание |
|---|---|---|---|
| `REQUESTED` | нет | нет | Клиент отправил заявку на бронирование. Администратор должен ее рассмотреть и подтвердить или отклонить |
| `APPROVED` | нет | нет | Администратор подтведил заявку. |
| `CONFIRMED` | нет | нет | Заявку нельзя отменить через приложение. Прошло время бесплатной отмены. Игрок подтвердил свое желание играть |
| `SHOWN` | да | нет | Игрок пришел играть |
| `NOT_SHOWN` | да | нет | Игрок не пришел играть |
| `CANCELED_BY_CLUB` | да | да | Заявка отменена клубом |
| `CANCELED_BY_CUSTOMER` | да | да | Заявка отменена игроком |
| `OTHER` | да | да | Другой финальный статус |

### Схема смены статусов

Прогнозируемая последовательность смены статусов

```
REQUESTED -> APPROVED -> CONFIRMED
```

<img width="100%" src="https://raw.githubusercontent.com/palmstennis/palms.api.docs/master/assets/status-changes-schema.jpg" />

#### Ограничения
1. До установки статуса `APPROVED`, администратор может изменять стоимость бронирования.
2. Запросить списание можно после установки финального статуса `SHOWN` или `NOT_SHOWN`.
3. До статуса `CONFIRMED` пользователь может отменить бронь без согласования с клубом. После должен позвонить в клуб для отмены.
4. Поле `reason` должно быть не менее 8 символов.

### Финализация

После наступления финального статуса, в модели Booking проставляется поле `finished_at`.

## Получить список [GET /club/bookings{?page_size,page,status,date_from,date_to,area_type_id,player_id,coach_id}]

+ Parameters
  + `page_size`: 1 (number, optional) - количество записей на странице
  + page: 10 (number, optional) - номер страницы
  + status: `AVAILABLE` (string, optional) - (фильтр) статус бронирования
  + date_from: `2019-05-14` (string, optional) - вернуть бронирования после указанной даты
  + date_to: `2019-05-15` (string, optional) - вернуть бронирования до указанной даты
  + area_type_id: 1 (number, optional) - тип помещения
  + player_id: 1 (number, optional) - id клубного игрока
  + coach_id: 1 (number, optional) - id тренера

+ Request (application/json)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__Bookings)

## Получить модель [GET /club/bookings/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор бронирования

+ Request (application/json)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__Booking)

## Создать модель [POST /club/bookings]

+ Request (application/json)
    + Attributes (Booking__Create__Request)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__Booking)

## Обновить статус модели [POST /club/bookings/{id}/status]

+ Parameters
  + id: 1 (number, required) - идентификатор бронирования

+ Request (application/json)
  + Attributes (Booking__Status__Request)
  + Headers

      ```
      Authorization: Bearer XXXXX
      ```

+ Response 200 (application/json)
  + Attributes (Response__Booking)

## Обновить модель [PATCH /club/bookings/{id}]

### Ограничения

1. Обновлять поля `price` и `currency` можно только до установки статуса `APPROVED`. После подтверждения статуса изменять цену нельзя.

+ Parameters
  + id: 1 (number, required) - идентификатор бронирования

+ Request (application/json)
    + Attributes (Booking__Update__Request)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__Booking)

## Списать оплату за бронирование [POST /club/bookings/{id}/capture]

+ Parameters
  + id: 1 (number, required) - идентификатор бронирования

+ Request (application/json)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__Booking)

## Зафиксировать оплату наличными или абонементом [POST /club/bookings/{id}/pay]
| Статус | Описание |
|---|---|
| `CASH` | Оплата наличными |
| `SUBSCRIPTION` | Оплата абонементом |
| `PAYMENT_TERMINAL` | Оплата через платежный терминал |

+ Request (application/json)
    + Attributes (Booking__Pay__Cash__Request)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__Booking)


## Доступные методы оплаты букинга [GET /club/bookings/{id}/payment-methods]

+ Request (application/json)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__PaymentMethods)


## Экспорт в CSV [GET /club/bookings/export{?status,date_from,date_to}]

+ Parameters
  + status: `AVAILABLE` (string, optional) - (фильтр) статус бронирования
  + date_from: `2019-05-14` (string, optional) - вернуть бронирования после указанной даты
  + date_to: `2019-05-15` (string, optional) - вернуть бронирования до указанной даты
  + area_type_id: 1 (number, optional) - тип помещения
  + player_id: 1 (number, optional) - id клубного игрока
  + coach_id: 1 (number, optional) - id тренера


+ Request (application/json)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```
+ Response 204 (application/json)

# Group Платежи

### Статусы платежей

| Статус | Описание |
|---|---|
| `CREATED` | Платеж создан, но не оплачен |
| `PROCESSING` | Платеж в обработке |
| `DECLINED` | Платеж не прошел |
| `APPROVED` | Плаатеж прошел успешно |
| `EXPIRED` | Вышло время оплаты платежа. Его больше нельзя оплатить |
| `REVERSED` | Платеж отменен. Средства вернутся плательщику |

## Получить список [GET /club/payments{?page_size,page,statuses,date_from,date_to,player_id,coach_id,payment_method}]

+ Parameters
  + `page_size`: 1 (number, optional) - количество записей на странице
  + page: 10 (number, optional) - номер страницы
  + statuses: `APPROVED,DECLINED` (string, optional) - (фильтр) статус платежа
  + date_from: `2019-05-14` (string, optional) - вернуть платежи после указанной даты
  + date_to: `2019-05-15` (string, optional) - вернуть платежи до указанной даты
  + player_id: 1 (number, optional) - id клубного игрока
  + coach_id: 1 (number, optional) - id тренера
  + payment_method: `ONLINE,CASH,SUBSCRIPTION` (string, optional) - (фильтр) тип платежа

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__Payments)

## Получить модель [GET /club/payments/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор платежа

+ Request (application/json)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__Payment)

## Получить статистику [GET /club/payments/stats{?statuses,date_from,date_to,player_id,coach_id,payment_method}]
`total` - Все платежи типа `PAYMENT`

`approved` - списаные деньги (`APPROVED` + `processed_at_isnull=False`)

`reserved` - деньги которые hold на fondy (`APPROVED` + `processed_at_isnull=True`)

`declined` - деньги которые к нам не дойдут (`DECLINED, EXPIRED, REVERSED`)

`CREATED` и `PROCESSING` игнорируются так как они промежуточные и сущесвуют недолго (`PROCESSING` может буть вообще меньше секунды)
Это касается только `ONLINE` патежей. Кэш и абонемент вотоматически approved

Учитываются только платежи с типом `PAYMENT` (`AUTH` списывает минимальную сумму и возвращает ее обратно что в остатке равно `0`)
+ Parameters
  + statuses: `APPROVED,DECLINED` (string, optional) - (фильтр) статус платежа
  + date_from: `2019-05-14` (string, optional) - вернуть платежи после указанной даты
  + date_to: `2019-05-15` (string, optional) - вернуть платежи до указанной даты
  + player_id: 1 (number, optional) - id клубного игрока
  + coach_id: 1 (number, optional) - id тренера
  + payment_method: `ONLINE,CASH,SUBSCRIPTION` (string, optional) - (фильтр) тип платежа

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__PaymentStats)

## Экспорт в CSV [GET /club/payments/export{?status,date_from,date_to}]

+ Parameters
  + statuses: `APPROVED,DECLINED` (string, optional) - (фильтр) статус платежа
  + date_from: `2019-05-14` (string, optional) - вернуть платежи после указанной даты
  + date_to: `2019-05-15` (string, optional) - вернуть платежи до указанной даты

+ Request (application/json)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```
+ Response 204 (application/json)

# Group Тарифы

## Получить список [GET /club/tarrifs{?page_size,page}]

+ Parameters
  + `page_size`: 1 (number, optional) - количество записей на странице
  + page: 10 (number, optional) - номер страницы

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__Tarrifs)

## Получить модель [GET /club/tarrifs/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор тарифа

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__Tarrif)

## Обновить модель [PUT /club/tarrifs/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор тарифа

+ Request (application/json)
    + Attributes (Tarrif_Update_Request)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__Tarrif)

## Удалить модель [DELETE /club/tarrifs/{id}]

Нельзя удалить последнее правило тарифов

+ Parameters
  + id: 1 (number, required) - идентификатор тарифа

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)

## Создать модель [POST /club/tarrifs]

+ Request (application/json)
    + Attributes (Tarrif_Create_Request)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__Tarrif)


## Посчитать стоимость [POST /club/tarrifs/calc]

+ Request (application/json)
    + Attributes (Tarrif_Calc_Request)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__Tarrif_Calc)

## Обновить приоритет [POST /club/tarrifs/update-priority]
Для обновления приоритетов надо передавать параметры списком
[{rule_id: N, priority: 10}, ...{}]
+ Request (application/json)
    + Attributes (Tarrif_Priority_Request)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__Tarrif)


# Group Расписание

## Получить список [GET /club/schedule-rules{?page_size,page}]

+ Parameters
  + `page_size`: 1 (number, optional) - количество записей на странице
  + page: 10 (number, optional) - номер страницы

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__ScheduleRules)

## Получить модель [GET /club/schedule-rules/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор тарифа

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__ScheduleRule)

## Обновить модель [PUT /club/schedule-rules/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор тарифа

+ Request (application/json)
    + Attributes (ScheduleRule_Update_Request)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__ScheduleRule)

## Удалить модель [DELETE /club/schedule-rules/{id}]

Нельзя удалить последнее правило тарифов

+ Parameters
  + id: 1 (number, required) - идентификатор правила

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)

## Создать модель [POST /club/schedule-rules]

+ Request (application/json)
    + Attributes (ScheduleRule_Create_Request)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__ScheduleRule)


## Посчитать стоимость [POST /club/schedule-rules/calc]

+ Request (application/json)
    + Attributes (ScheduleRule_Calc_Request)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__ScheduleRule_Calc)

## Обновить приоритет [POST /club/schedule-rules/update-priority]
Для обновления приоритетов надо передавать параметры списком
[{rule_id: N, priority: 10}, ...{}]
+ Request (application/json)
    + Attributes (Tarrif_Priority_Request)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__ScheduleRule)


# Group Расписание Тренеров

## Получить список [GET /club/coach-rules{?page_size,page}]

+ Parameters
  + `page_size`: 1 (number, optional) - количество записей на странице
  + page: 10 (number, optional) - номер страницы

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__CoachScheduleRules)

## Получить модель [GET /club/coach-rules/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор тарифа

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__CoachScheduleRule)

## Обновить модель [PATCH /club/coach-rules/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор тарифа

+ Request (application/json)
    + Attributes (CoachScheduleRule_Update_Request)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__CoachScheduleRule)

## Удалить модель [DELETE /club/coach-rules/{id}]

Нельзя удалить последнее правило

+ Parameters
  + id: 1 (number, required) - идентификатор правила

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)

## Создать модель [POST /club/coach-rules]

+ Request (application/json)
    + Attributes (CoachScheduleRule_Create_Request)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__CoachScheduleRule)


## Обновить приоритет [POST /club/coach-rules/update-priority]
Для обновления приоритетов надо передавать параметры списком
[{rule_id: N, priority: 10}, ...{}]
+ Request (application/json)
    + Attributes (Tarrif_Priority_Request)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__CoachScheduleRule)


# Group Schedule Window

## Получить список [GET /club/schedule-window{?page_size,page}]

+ Parameters
  + `page_size`: 1 (number, optional) - количество записей на странице
  + page: 10 (number, optional) - номер страницы

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__SWs)

## Получить модель [GET /club/schedule-window/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор schedule window

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__SW)

## Обновить модель [PATCH /club/schedule-window/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор schedule window

+ Request (application/json)
    + Attributes (SW_Update_Request)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__SW)

## Создать модель [POST /club/schedule-window]

+ Request (application/json)
    + Attributes (SW_Create_Request)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__SW)

## Удалить модель [DELETE /club/schedule-window/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор schedule window

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 204 (application/json)



# Group Schedule Window Date

## Получить список [GET /club/schedule-window-date{?page_size,page}]

+ Parameters
  + `page_size`: 1 (number, optional) - количество записей на странице
  + page: 10 (number, optional) - номер страницы

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__SWDs)

## Получить модель [GET /club/schedule-window-date/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор schedule window date

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__SWD)

## Обновить модель [PATCH /club/schedule-window-date/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор schedule window date

+ Request (application/json)
    + Attributes (SWD_Update_Request)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__SWD)


## Создать модель [POST /club/schedule-window-date]

+ Request (application/json)
    + Attributes (SWD_Create_Request)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__SWD)

## Удалить модель [DELETE /club/schedule-window-date/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор schedule window date

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 204 (application/json)


# Group Абонементы клуба

## Получить список [GET /club/subscriptions{?page_size,page,show_inactive,active}]

+ Parameters
  + `page_size`: 1 (number, optional) - количество записей на странице
  + page: 10 (number, optional) - номер страницы
  + show_inactive: true (boolean, optional) - флаг для того чтобы показать в общем списке неактивные
  + active: true (boolean, optional)

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__Subscriptions)


## Получить модель [GET /club/subscriptions/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор абонемента

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__Subscription)

## Обновить модель [PATCH /club/subscriptions/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор шаблона

+ Request (application/json)
    + Attributes (Subscription_Update_Request)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__Subscription)

## Создать модель [POST /club/subscriptions]

+ Request (application/json)
    + Attributes (Subscription_Update_Request)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__Subscription)

## Удалить модель [DELETE /club/subscriptions/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор тарифа

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 204 (application/json)


## Продать абонемент игроку [POST /club/subscriptions/{id}/sell]

+ Request (application/json)
    + Attributes (SellSubscription__Request)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__UserSubscription)



# Group Абонементы игрока для клуба

## Получить список [GET /club/usersubscriptions{?page_size,page,player_id}]

+ Parameters
  + `page_size`: 1 (number, optional) - количество записей на странице
  + page: 10 (number, optional) - номер страницы
  + player_id: 1 (number, optional) - фильтр по игроку

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__UserSubscriptions)


## Получить модель [GET /club/usersubscriptions/{id}]

+ Parameters
  + id: 1 (number, required) - идентификатор абонемента

+ Request (application/json)
    + Headers
        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
  + Attributes (Response__UserSubscription)


# Data Structures

## Responses
### `Response__Collection`
+ meta (object)
  + pagination (object)
      + total_number: 22 (number) - общее количество сущностей
      + current_page: 1 (number) - текущая страница
      + total_pages: 2 (number) - всего страниц
      + page_size: 20 (number) - записей на страницу
+ data (array, fixed-type)

### `Response__OK`
+ data (object, fixed-type)

### `Response__Bookings` (Response__Collection)
+ data (array)
  + (Booking)
  + (Booking)
  + (Booking)

### `Response__Booking` (Response__OK)
+ data (Booking)

## Bookings

### `Booking__Create__Request` (object)
+ `date_from`: `2019-08-23T12:23:23+00:00Z` (string, required) - дата и время начала бронирования
+ `date_to`: `2019-08-23T12:23:23+00:00Z` (string, required) - дата и время начала бронирования
+ price: `20000` (number, optional) - стоимость бронирования. Целое число без запятых (20000 - 200.00)
+ currency: `UAH` (string, optional) - валюта стоимости.
+ `area_id`: `1` (number) - идентификатор корта
+ `user_id`: `1` (number) - идентификатор пользователя
+ `coach_id`: `1` (number, optional) - идентификатор тренера
+ `default_cancelation_time`: `2019-08-23T12:23:23+00:00Z` (string, optional) - дата бесплатной отмены бронирование

### `Booking_Status` (enum[string])
+ `REQUESTED`
+ `APPROVED`
+ `CONFIRMED`
+ `CANCELED_BY_CUSTOMER`
+ `CANCELED_BY_CLUB`
+ `OTHER`
+ `SHOWN`
+ `NOT_SHOWN`

### `Booking` (object)
+ id: 1 (number) - идентификатор бронирования
+ date_from: `2019-08-23T12:23:23+00:00Z` (string) - дата начала забронированного времени
+ date_to: `2019-08-23T12:23:23+00:00Z` (string) - дата окончания забронированного отрезка времени
+ price: `20000` (number) - стоимость бронирования. Целое число без запятых (20000 - 200.00)
+ currency: `UAH` (string) - валюта стоимости.
+ status: `APPROVED` (Booking_Status) - статус бронирования
+ area (Area) - корт, на который создается бронь
+ user (User) - пользователь, который забронировал корт
+ slot (Slot, optional) - пользователь, который забронировал корт
+ note: `some text` (string) - какой то комментарий о бронировнии
+ created_at: `2019-08-23T12:23:23+00:00Z` (string) - дата создания
+ updated_at: `2019-08-23T12:23:23+00:00Z` (string) - дата последнего обновления
+ finished_at: `2019-08-23T12:23:23+00:00Z` (string) - дата завершения бронирования
+ payment: (Payment) - оплата по бронированию

### `Booking__Update__Request` (object)

+ `date_from`: `2019-08-23T12:23:23+00:00Z` (string) - дата и время начала бронирования
+ `date_to`: `2019-08-23T12:23:23+00:00Z` (string) - дата и время начала бронирования
+ price: `20000` (number) - стоимость бронирования. Целое число без запятых (20000 - 200.00)
+ currency: `UAH` (string) - валюта стоимости.
+ `area_id`: `1` (number) - идентификатор корта (опциональный, если передан slot_id)
+ `slot_id`: `1` (number) - идентификатор слота (опциональный, если передан area_id)
+ note: `some text` (string) - какой то комментарий о бронировнии

### `Booking__Status__Request` (object)

+ `status`: APPROVED (string, required) - статус бронирования
+ `reason` (string, required) - причина смены статуса

### `Booking__Pay__Cash__Request` (object)
+ price: `20000` (number) - стоимость бронирования. Целое число без запятых (20000 - 200.00)
+ usersubscription_id: 1 (number, optional) - абонемент
+ payment_method: `CASH` (string, optional) - способ оплаты

## Areas
### Area (object)
+ id: `1` (number) - идентификатор корта
+ title: `Корт 1` (string) - название корта
+ created_at: `2019-08-23T12:23:23+00:00Z` (string) - дата создания
+ updated_at: `2019-08-23T12:23:23+00:00Z` (string) - дата последнего обновления
+ enabled: `true` (boolean) - включена или нет в выдачу игроку
+ parameters (array) - параметры корта. значения и ключи управляются из админки Palms.
    + (object)
        + title: `Открытый` (string)
        + key: `outdoor` (string)
        + value: `tennis_court_type` (string)
+ area_type (AreaTypeResponse) - тип помещенияс доступными параметрами

### `Response__Areas` (Response__Collection)
+ data (array)
  + (Area)
  + (Area)

### `Response__Area` (Response__OK)
+ data (Area)

### `Area_Patch_Request`
+ enabled: `true` (boolean) - включена или нет в выдачу игроку
+ area_type: `1` (number) - id типа помещения
+ parameters: (array) - набор параметров для ипа помещения. Для удаления старых опций нужно передать пустой список []
    + (object)
      + key_id: `1` (number) - id ключа
      + options_id: `1` (number) - опция относящася к ключу
    + (object)
      + key_id: `1` (number) - id ключа
      + value: `произвольная опция` (string) - текстовое значение. options_id и value не могут быть установленны одновременно, но одно из значений обязательно.


### `Area_Create_Request`
+ title: `Корт1` (string) - название корта
+ enabled: `true` (boolean) - включена или нет в выдачу игроку
+ area_type: `1` (number) - id типа помещения
+ parameters: (array) - набор параметров для ипа помещения
    + (object)
      + key_id: `1` (number) - id ключа
      + options_id: `1` (number) - опция относящася к ключу
    + (object)
      + key_id: `1` (number) - id ключа
      + value: `произвольная опция` (string) - текстовое значение. options_id и value не могут быть установленны одновременно, но одно из значений обязательно.


## Users
### User (object)
+ id: `1` (number) - идентификатор клиента
+ name: `Иван` (string) - имя клиента
+ phone_number: `+380932345678`(string) - номер телефона клиента
+ note: `some text` (string) - какой то комментарий о клиенте
+ has_palms: `true` (boolean) - использует/не использует Palms

### `User_Create_Request`
+ name: `Иван` (string) - имя клиента
+ phone_number: `+380932345678`(string) - номер телефона клиента
+ note: `some text` (string) - какой то комментарий о клиенте

### `User_Patch_Request`
+ name: `Иван` (string) - имя клиента
+ note: `some text` (string) - какой то комментарий о клиенте

### `Response__Users` (Response__Collection)
+ data (array)
  + (User)
  + (User)
  + (User)

### `Response__User` (Response__OK)
+ data (User)

### `Response__User_Import` (Response__OK)
+ data
    + tolal: 10 (number)
    + added: 9 (number)
    + not_added: 1 (number)

## Slots

### Slot (object)
+ id: 1 (number) - идентификатор слота
+ date_from: `2019-08-23T12:23:23+00:00Z` (string) - дата и время начала слота
+ date_to: `2019-08-23T12:23:23+00:00Z` (string) - дата и время окончания слота
+ status: `AVAILABLE` (Slot_Status) - статус слота
+ price: `20000` (number) - стоимость бронирования. Целое число без запятых (20000 - 200.00)
+ currency: `UAH` (string) - валюта стоимости.
+ area (Area) - корт, к которому относится слот
+ note `some text` (string) - заметка, отображается клубу
+ created_at: `2019-08-23T12:23:23+00:00Z` (string) - дата создания
+ updated_at: `2019-08-23T12:23:23+00:00Z` (string) - дата последнего обновления

### `Slot_Status` (enum[string])
+ AVAILABLE
+ BOOKED
+ DISABLED

### `Response__Slots` (Response__Collection)
+ data (array)
  + (Slot)
  + (Slot)
  + (Slot)

### `Response__Slot` (Response__OK)
+ data (Slot)

### `Slot_Create_Request`
+ date_from: `2019-08-23T12:23:23+00:00Z` (string) - дата и время начала слота
+ date_to: `2019-08-23T12:23:23+00:00Z` (string) - дата и время окончания слота
+ status: AVAILABLE (string) - статус слота
+ price: `20000` (number) - стоимость бронирования. Целое число без запятых (20000 - 200.00)
+ currency: `UAH` (string) - валюта стоимости.
+ area_id: 1 (number) - идентификатор корта, к которому относится слот
+ note (string) - заметка, отображается клубу

### `Slot_Update_Request`
+ date_from: `2019-08-23T12:23:23+00:00Z` (string) - дата и время начала слота
+ date_to: `2019-08-23T12:23:23+00:00Z` (string) - дата и время окончания слота
+ status: `AVAILABLE` (Slot_Status) - статус слота
+ price: `20000` (number) - стоимость бронирования. Целое число без запятых (20000 - 200.00)
+ currency: `UAH` (string) - валюта стоимости.
+ area_id: 1 (number) - идентификатор корта, к которому относится слот
+ note - заметка, отображается клубу

# Payments

### `Payment_Type` (enum[string])
+ `AUTH`
+ `PAYMENT`

### `Payment_Method` (enum[string])
+ `ONLINE`
+ `CASH`
+ `SUBSCRIPTION`

### `Payment_Status` (enum[string])
+ `CREATED`
+ `PROCESSING`
+ `DECLINED`
+ `APPROVED`
+ `EXPIRED`
+ `REVERSED`

### Payment (object)
+ id: `1` (number) - внутренний идентификатор платежа в системе Palms
+ amount: `120` (number) - сумма платежа в копейках/центах без разделителей. 120 - 1 грн 20 коп
+ currency: `UAH` (string) - валюта платежа
+ status: `CREATED` (Payment_Status) - статус транзакции
+ user: (User) - плательщик
+ `created_at`: `2019-08-10T00:00:00` (string) - дата создание платежная
+ `processed_at`: `2019-08-10T00:00:00` (string) - дата совершения платежа
+ `updated_at`: `2019-08-10T00:00:00` (string) - последняя дата обновления платежа

### PaymentStats (object)
+ total:
  + count: `10` (number) - количество всех платежей
  + amount: `55000` (number) - сумма всех платежей

+ approved:
  + count: `5` (number) - количество платежей со статусом `APPROVED` которые успешно списаны
  + amount: `30000` (number) - сумма платежей со статусом `APPROVED`которые успешно списаны

+ reserved:
  + count: `3` (number) - количество платежей со статусом `APPROVED`, но которые еще не списаны в платежной системе
  + amount: `5000` (number) - сумма платежей со статусом `APPROVED`, но которые еще не списаны в платежной системе

+ declined:
  + count: `2` (number) - количество платежей со статусом `DECLINED`, `EXPIRED`, `REVERSED`
  + amount: `20000` (number) - сумма платежей со статусами `DECLINED`, `EXPIRED`, `REVERSED`


### `Response__Payments` (Response__Collection)
+ data (array)
  + (Payment)
  + (Payment)

### `Response__Payment` (Response__OK)
+ data (Payment)

### `Response__PaymentStats` (Response__OK)
+ data (PaymentStats)

# Clubs

### Club (object)
+ id: 1 (number) - идентификатор клуба
+ title: `Palms club` (string) - название клуба
+ subtitle: `Теннисный клуб` (string) - видовое описание клуба
+ description: `На линии корта сомкнулись ракетки, Хотелось бы форхенд, но мяч попал в сетку` (string) - описание клуба. Что он говорит о себе
+ prices: `Форматированный текст в markdown с ценами клуба` (string) - форматированный текст в markdown с ценами клуба
+ working_hours_tag: `7:00 - 23:00 без выходных` (string) - короткая строка с режимом работы клуба
+ pricing_tag: `270 - 530 грн/час` (string) -
+ address_tag: `Киев, ул. Академика Ботичелли, 3А` (string) -
+ contact_phone: `+380441234567` (string) -
+ contact_phone_two: `+380987654321` (string) -
+ contact_email: `hello@palms.tennis` (string) -
+ free_services: `Описание бесплатный услуг в markdown` (string) - описание бесплатный услуг в markdown
+ additional_services: `Описание дополнительных услуг в markdown` (string) - описание дополнительных услуг в markdown
+ rules: `описание правил клуба в markdown` (string) - описание правил клуба в markdown
+ facebook_title: `Теннисный клуб "Palms"` (string) - название FB страницы клуба
+ facebook_link: `https://www.facebook.com/sasha.goreniuk` (string) - ссылка на FB страницу клуба
+ areas (array[Area]) - корты клуба
+ area_types (array[AreaTypeResponse]) - тип помещенияс доступными параметрами
+ options: (object) - настройки клуба в Palms. Зависит от бизнес-процессов клуба
  + default_cancelation_time: `10800` (number) - время в секундах для бесплатной отмены бронирования. Считает от даты старта бронирования. 0 - нет бесплатной отмены
  + autocapture: `true` (boolean) - автоматическое списание денег со счета, после наступления статусов Shown, Not shown.
+ features: (object) - возможности клуба в Palms. Зависит от интеграции и настроек клуба
  + online_payments: `true` (boolean) - доступно онлайн оплата
+ coordinates: (object) - координаты клуба
  + latitude: `50.26421` (string) - широта
  + longitude: `30.31432` (string) - долгота
+ images: (array) - изображения клуба
  + `https://domain.com`
  + `https://domain.com`
  + `https://domain.com`
  + `https://domain.com`

### `Response__Club` (Response__OK)
+ data (Club)

# Tarrifs

### Tarrif (object)
+ id: `1` (number) - внутренний идентификатор тарифа в системе Palms
+ result: 20000 (number) - стоимость в валюте клуба
+ title: `в вс все корты по 200` (string) - заголовок
+ day_weeks: (array[number]) - день недели
  + `6`
+ hours_range: (array[number]) - отрезок времени в дне. с 8 до 12 часов
  + `8`
  + `12`
+ date_range: (array) - даты в рамках которых действует тариф
  + `2019-08-10`
  + `2019-09-10`
+ areas: (array[number]) - идентификаторы кортов
  + `1`
  + `2`
+ priority: 10 (number) - приоритет
+ `created_at`: `2019-08-10T00:00:00` (string) - дата создание тарифы
+ `updated_at`: `2019-08-10T00:00:00` (string) - последняя дата обновления тарифы

### `Response__Tarrifs` (Response__Collection)
+ data (array)
  + (Tarrif)
  + (Tarrif)

### `Response__Tarrif` (Response__OK)
+ data (Tarrif)


### `Tarrif_Priority_Request` (object)
+ rule_id: `1` (number)
+ priority: `1` (number)


### `Tarrif_Create_Request` (object)
+ result: 20000 (number) - стоимость в валюте клуба
+ title: `в вс все корты по 200` (string) - валюта платежа
+ day_weeks: (array[number]) - день недели
  + `6`
+ hours_range: (array[number]) - отрезок времени в дне. с 8 до 12 часов
  + `8`
  + `12`
+ date_range: (array) - даты в рамках которых действует тариф
  + `2019-08-10`
  + `2019-09-10`
+ areas: (array[number]) - идентификаторы кортов
  + `1`
  + `2`
+ priority: 10 (number) - приоритет

### `Tarrif_Update_Request` (object)
+ result: 20000 (number) - стоимость в валюте клуба
+ title: `в вс все корты по 200` (string) - валюта платежа
+ day_weeks: (array[number]) - день недели
  + `6`
+ hours_range: (array[number]) - отрезок времени в дне. с 8 до 12 часов
  + `8`
  + `12`
+ date_range: (array) - даты в рамках которых действует тариф
  + `2019-08-10`
  + `2019-09-10`
+ areas: (array[number]) - идентификаторы кортов
  + `1`
  + `2`
+ priority: 10 (number) - приоритет

### `Tarrif_Calc_Request` (object)
+ date_from: `2019-08-10T00:00:00` (string) - дата начала бронирования
+ date_to: `2019-08-10T00:00:00` (string) - дата завершения бронирования
+ area_id: 1 (number, required) - зона бронирования
+ ordering: (array[number], optional) - очередность
  + `1`
  + `2`
+ coach_id: 1 (number, optional) - id тренера

### `Response__Tarrif_Calc` (Response__OK)
+ data (object)
  + price: `300` (number) - стоимость
  + currency: `UAH` (string) - валюта

# ScheduleRules

### ScheduleRule (object)
+ id: `1` (number) - внутренний идентификатор правила расписания в системе Palms
+ result: (array[number]) - рабочие часы
  + 8
  + 12
+ title: `в пн с 23 июля 2019 по 20 сент 2019 года 1ый корт работает с 8 до 12` (string) - заголовок
+ day_weeks: (array[number]) - день недели
  + `6`
+ date_range: (array) - даты в рамках которых действует правило расписания
  + `2019-08-10`
  + `2019-09-10`
+ areas: (array[number]) - идентификаторы кортов
  + `1`
  + `2`
+ priority: 10 (number) - приоритет
+ `created_at`: `2019-08-10T00:00:00` (string) - дата создания
+ `updated_at`: `2019-08-10T00:00:00` (string) - последняя дата обновления

### `Response__ScheduleRules` (Response__Collection)
+ data (array)
  + (ScheduleRule)
  + (ScheduleRule)

### `Response__ScheduleRule` (Response__OK)
+ data (ScheduleRule)


### `ScheduleRule_Create_Request` (object)
+ result: (array[number]) - рабочие часы
  + 8
  + 12
+ title: `в пн с 23 июля 2019 по 20 сент 2019 года...` (string) - заголовок
+ day_weeks: (array[number]) - день недели
  + `6`
+ date_range: (array) - даты в рамках которых действует правило расписания
  + `2019-08-10`
  + `2019-09-10`
+ areas: (array[number]) - идентификаторы кортов
  + `1`
  + `2`
+ priority: 10 (number) - приоритет
+ `created_at`: `2019-08-10T00:00:00` (string) - дата создания
+ `updated_at`: `2019-08-10T00:00:00` (string) - последняя дата обновления

### `ScheduleRule_Update_Request` (object)
+ result: (array[number]) - рабочие часы
  + 8
  + 12
+ title: `в пн с 23 июля 2019 по 20 сент 2019 года 1ый корт работает с 8 до 12` (string) - валюта платежа
+ day_weeks: (array[number]) - день недели
  + `6`
+ date_range: (array) - даты в рамках которых действует правило расписания
  + `2019-08-10`
  + `2019-09-10`
+ areas: (array[number]) - идентификаторы кортов
  + `1`
  + `2`
+ priority: 10 (number) - приоритет
+ `created_at`: `2019-08-10T00:00:00` (string) - дата создания
+ `updated_at`: `2019-08-10T00:00:00` (string) - последняя дата обновления

### `ScheduleRule_Calc_Request` (object)
+ date_from: `2019-08-10T00:00:00` (string) - начало отрезка
+ date_to: `2019-08-20T00:00:00` (string) - конец отрезка
+ area_id: (array) - зона бронирования
  + 1
  + 2
  + 3

### ScheduleRuleModel (object)
+ date: `2019-08-10T00:00:00` (string) - дата
+ area_id: `1` (number) - идентификатор корта
+ hours: (array) - отрезок времени
  + 8
  + 20

### `Response__ScheduleRule_Calc` (Response__Collection)
+ data (array)
  + (ScheduleRuleModel)
  + (ScheduleRuleModel)
  + (ScheduleRuleModel)
  + (ScheduleRuleModel)

# AreaTypes objects

### AreaType (object)
+ id: `1` (number) - внутренний идентификатор типа помещения в системе Palms
+ value: `court` (string) - тип помещения
+ title: `somestring` (string) - тайтл, поддерживается локализация

### AreaParametersKeys (object)
+ title: `somestring` (string) - тайтл, поддерживается локализация
+ value: `tennis_court_covering_type` (string) - наименование ключа
+ area_type (AreaType) - тип корта

### AreaParametersOptions (object)
+ title: `somestring` (string) - тайтл, поддерживается локализация
+ value: `carpet` (string) - наименование опции
+ key (AreaParametersKeys) - ключ, к которому относится опция

### AreaParameters (object)
+ area (Area) - корт, к которому относится слот
+ area_type (AreaType) - тип корта
+ key (AreaParametersKeys) - ключ, к которому относится опция
+ options (AreaParametersOptions) - опция

### OptionsResponse (object)
+ id: `1` (number)
+ title: `somestring` (string) - тайтл, поддерживается локализация
+ value: `hard` (string)


### `AreaTypeResponse` (object)
+ id: `1` (number)
+ value: `court` (string)
+ title: `somestring` (string) - тайтл, поддерживается локализация
+ parameters (array) - параметры доступные у типа помещения. значения и ключи управляются из админки Palms.
    + (object)
        + id: `1` (number)
        + key (object)
          + id: `1` (number)
          + title: `somestring` (string) - тайтл, поддерживается локализация
          + value: `tennis_court_covering_type` (string)
          + options (array[OptionsResponse])


### `Response__AreaTypes` (Response__Collection)
+ data (array)
  + (AreaTypeResponse)
  + (AreaTypeResponse)


### `Response__AreaType`
+ data (AreaTypeResponse)


# Schedule Window objects

### `ScheduleWindowType` (enum[string])
+ `AUTO`
+ `MANUAL`

### `Response__SWs` (Response__Collection)
+ data (array)
  + (ScheduleWindow)
  + (ScheduleWindow)

### `Response__SW` (Response__OK)
+ data (ScheduleWindow)

### `SW_Create_Request` (object)
+ schedule_type: `AUTO` (ScheduleWindowType)
+ days: `7` (number)

### `SW_Update_Request` (object)
+ schedule_type: `AUTO` (ScheduleWindowType)
+ days: `7` (number)
days обязателен если schedule_type AUTO

### ScheduleWindow (object)
+ id: `1` (number)
+ club_id: `1` (number)
+ schedule_type: `AUTO` (ScheduleWindowType)
+ days: `7` (number)


# Schedule Window Date objects

### `Response__SWDs` (Response__Collection)
+ data (array)
  + (ScheduleWindowDate)
  + (ScheduleWindowDate)

### `Response__SWD` (Response__OK)
+ data (ScheduleWindowDate)

### `SWD_Create_Request` (object)
+ schedule_window_date: `2019-08-10T00:00:00` (string) - дата
+ enabled: `true` (boolean)

### `SWD_Update_Request` (object)
+ enabled: `true` (boolean)

### ScheduleWindowDate (object)
+ id: `1` (number)
+ club_id: `1` (number)
+ schedule_window_id: `1` (number)
+ schedule_window_date: `2019-08-10T00:00:00` (string) - дата
+ enabled: `true` (boolean)

# Subscription objects
### `Response__Subscriptions` (Response__Collection)
+ data (array)
  + (Subscription)
  + (Subscription)

### `Response__Subscription` (Response__OK)
+ data (Subscription)

### Subscription (object)
+ id: `1` (number)
+ title: `somestring` (string) - тайтл
+ club_id: `1` (number)
+ price: `50000` (number)
+ games_number :`10` (number) - количестко игр. При оплате будет вычитаться, при рефанде будет добавляться
+ validity_period: `365` (number) - количство дней действительности абонемента
+ area_types: (array) - типы зон бронирования
  + (ShortAreaTypeResponse)
  + (ShortAreaTypeResponse)

+ day_weeks: (array) - дни недели
  + 1
  + 2
  + 3
+ hours: (array) - часы по которым абонемент действует
  + 8
  + 20
+ active: `true` (boolean)

### `Subscription_Update_Request` (object)
+ title: `somestring` (string) - тайтл
+ price: `50000` (number)
+ games_number :`10` (number) - количестко игр. При оплате будет вычитаться, при рефанде будет добавляться
+ validity_period: `365` (number) - количство дней действительности абонемента
+ area_types: (array) - типы зона бронирования
  + 1
  + 2
  + 3
+ day_weeks: (array) - дни недели
  + 1
  + 2
  + 3
+ hours: (array) - часы по которым абонемент действует
  + 8
  + 20
+ active: `true` (boolean)

### `Subscription_Buy_Request` (object)
+ card_id: `1` (number, required)

### `SellSubscription__Request` (object)
+ player_id: `1` (number, required)

### `Response__PaymentMethods` (Response__Collection)
+ data
  + subscriptions (array):
     + (UserSubscription)
     + (UserSubscription)

### UserSubscription (object)
+ id: `1` (number)
+ title: `somestring` (string) - тайтл
+ price: `50000` (number)
+ currency: `UAH` (string) - валюта
+ user (User) - пользователь, который купил абонемент
+ games_number: `10` (number) - количестко игр. При оплате будет вычитаться, при рефанде будет добавляться
+ validity_period: `365` (number) - количство дней действительности абонемента
+ payment: (Payment)
+ is_valid: `true` (boolean)

### `Response__UserSubscription` (Response__OK)
+ data (UserSubscription)

### `Response__UserSubscriptions` (Response__Collection)
+ data (array)
  + (UserSubscription)
  + (UserSubscription)

### `ShortAreaTypeResponse` (object)
+ id: `1` (number)
+ title: `Somestring` (string) - тайтл
+ value: `somestring` (string) - значение
+ logo: `https://foo.bar/some.img` (string) - лого


# CoachScheduleRules

### CoachScheduleRule (object)
+ id: `1` (number) - внутренний идентификатор правила расписания в системе Palms
+ result: (array[number]) - рабочие часы
  + 8
  + 12
+ title: `тайтл` (string) - произвольный заголовок
+ day_weeks: (array[number]) - день недели
  + `6`
+ date_range: (array) - даты в рамках которых действует правило расписания
  + `2019-08-10`
  + `2019-09-10`
+ areas: (array[number]) - идентификаторы кортов
  + `1`
  + `2`
+ coaches: (array[number]) - идентификаторы тренеров
  + `1`
  + `2`
+ priority: 10 (number) - приоритет
+ `created_at`: `2019-08-10T00:00:00` (string) - дата создания
+ `updated_at`: `2019-08-10T00:00:00` (string) - последняя дата обновления

### `Response__CoachScheduleRules` (Response__Collection)
+ data (array)
  + (CoachScheduleRule)
  + (CoachScheduleRule)

### `Response__CoachScheduleRule` (Response__OK)
+ data (CoachScheduleRule)


### `CoachScheduleRule_Create_Request` (object)
+ result: (array[number]) - рабочие часы
  + 8
  + 12
+ title: `в пн с 23 июля 2019 по 20 сент 2019 года...` (string) - заголовок
+ day_weeks: (array[number]) - день недели
  + `6`
+ date_range: (array) - даты в рамках которых действует правило расписания
  + `2019-08-10`
  + `2019-09-10`
+ areas: (array[number]) - идентификаторы кортов
  + `1`
  + `2`
+ coaches: (array[number]) - идентификаторы тренеров
  + `1`
  + `2`
+ priority: 10 (number) - приоритет
+ `created_at`: `2019-08-10T00:00:00` (string) - дата создания
+ `updated_at`: `2019-08-10T00:00:00` (string) - последняя дата обновления

### `CoachScheduleRule_Update_Request` (object)
+ result: (array[number]) - рабочие часы
  + 8
  + 12
+ title: `в пн с 23 июля 2019 по 20 сент 2019 года...` (string) - заголовок
+ day_weeks: (array[number]) - день недели
  + `6`
+ date_range: (array) - даты в рамках которых действует правило расписания
  + `2019-08-10`
  + `2019-09-10`
+ areas: (array[number]) - идентификаторы кортов
  + `1`
  + `2`
+ priority: 10 (number) - приоритет
+ `created_at`: `2019-08-10T00:00:00` (string) - дата создания
+ `updated_at`: `2019-08-10T00:00:00` (string) - последняя дата обновления

### `CoachScheduleRule_Calc_Request` (object)
+ date_from: `2019-08-10T00:00:00` (string) - начало отрезка
+ date_to: `2019-08-20T00:00:00` (string) - конец отрезка
+ area_id: (array) - зона бронирования
  + 1
  + 2
  + 3
