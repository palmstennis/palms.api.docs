FORMAT: 1A

# Palms API Documentation

## Environments


## Модели данных

### Общие правила форматов данных

#### Даты

Даты хранятся в формате [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) c указанием времени и часового пояса.

Например, `2018-09-05T12:23:23`

#### Валюты

Валюты мы храним в формате [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) в трех символьной строке.

Например, `USD`, `UAH`, или `EUR`.

#### Суммы

Суммы мы храним целым числом без разделителя.

Например, сумма 5 грн 40 коп. будет храниться как `540`

#### Номера телефонов

Согласно стандарту [E.164](https://en.wikipedia.org/wiki/E.164) в международном формате.

Например, `+380932345678`

### Booking

+ `id` (unsigned integer) - идентификатор бронирования
+ `date_from` (Date. ISO_8601) - старт времени бронирования
+ `date_to` (Date. ISO_8601) - время окончания бронирования
+ `status` (Booking Status) - статус бронирования
+ `price` (unsigned integer) - стоимость бронирования
+ `currency` (string. ISO_4217) - валюта списания
+ `payments` (Payments[]) - информация о платежах в рамках бронирования
+ `area` (Area) - информация о корте
+ `slot` (Slot) - информация о забронированном слоте
(also has area information)
+ `user` (User) - информация о пользователе, который забронировал слот
+ `created_at` (Date) - дата создания бронирования
+ `updated_at` (Date) - дата последнего изменения бронирования
+ `finished_at` (Date) - дата наступления терминального статуса бронирования
+ `reference_id` (unsigned integer) - идентификатор бронирования во внешней системе (например, в CRM клуба)

### Модель Slot

+ `id` (unsigned integer) - идентификатор слота
+ `date_from` (Date. ISO 8601) - время начала слота
+ `date_to` (Date. ISO 8601) - время окончания слота
+ `cancelation_time` (Date. ISO 8601) - максимальное время бесплатной отмены бронирования
+ `status` (Slot_Status) - статус слота
+ `price` (unsigned integer) - стоимость бронирования
+ `currency` (string. ISO_4217) - валюта списания
+ `area` (Area) - информация о корте

### Модель User

+ `id` (unsigned integer) - идентификатор пользователя
+ `name` (string) - имя игрока
+ `phone_number` (string. E.164) - номер телефона в международном формате

## Статусы бронирования

### Промежуточные статусы

- `REQUESTED` - пользователь запросил бронирование
- `APPROVED` - бронирование одобрено администратором
- `CONFIRMED` - бронирование подтверждено. пользователь не может самостоятельно отменить бронирование.

### Терминальные статусы
- `CANCELED_BY_CUSTOMER` - бронирование отменено пользователем
- `CANCELED_BY_CLUB` - бронирование отменено клубом
- `OTHER` - другая причина. с обязательным указанием причины. Технический статус

- `SHOWN` - клиент пришел. Считаем игру случившейся
- `NOT_SHOWN` - клиент не пришел. Клуб принимает решение о списании самостоятельно

Поле `finished_at` - флаг завершения процесса бронирования. Поле проставляется после наступления терминального статуса.

**До наступления терминального статуса** возможно изменение параметров бронирования: даты, корта, и тп.
**После наступления терминального статуса** изменение данных бронирования НЕВОЗМОЖНО.


- Club
- Area
- Slot
- Booking
- Booking Set

## Clubs API

In this section we describe API routes related to Clubs API. The main purpose of Clubs API is to allow club to manage their data in Palms via API. With Palms Club API you can:

- create booking slots
- update slot information
- fetch information about bookings and update their statuses

### Basic integration flow

The simplest integration process includes exchanging of bookings and slots data. Club CRM is pulling the data about booking requests and sending information about slots. So in the simpliest integration way Your Club CRM doesn't have to have the external API and receive the webhooks or other request. So, just send us information about available slots for booking and fetch booking requests.

In this scope we don't manage club or area information via API. We just manage booking models.

### Authorization

Each Club has its own API Keys, that are using for request authentication. You can ask your support manager about API Key for you club.

To authorize a request send API Key in `Authorization` header.

```
Authorization: Bearer [token]
```

Example for curl
```sh
curl https://api.palms.tennis/v1/club/slots \
-H 'Authorization: Bearer abcdef'
```
<!--
# Group Slots

Some information abou slots model

### Fetch slots collection [GET /club/slots]

Information about filtering slots collection

### Fetch slots entity [GET /club/slots/:id]

Example of slot entity

### Group Update slot
#### Update slot status [POST /club/slots/{:id}/status]
#### Update slot date [POST /club/slots/{:id}/date]
#### Update slot price [POST /club/slots/{:id}/price] -->
