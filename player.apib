FORMAT: 1A
HOST: https://api.palms.tennis/v1

# Palms API

Документация описывает клиентское АПИ Palms. Оно используется в мобильном приложении, виджете и других клиентских приложениях Palms.

## Общая информация

1. Мы строим REST API. Все общение с Palms API проходит через HTTP в JSON формате. Мы стараемся следовать REST, но следуем common-sense и отходим от REST, когда это имеет смысл.
2. В каждом ответе, при котором меняется, создается модель мы возвращаем обновленное значение в ответе.

## Среды

| Среда | URL | Когда использовать |
| --- | --- | --- |
| Dev | https://api.dev.palms.tennis | Для разработки. Может очищаться и валиться. Она для внутренней работы. Лучше не использовать для интеграции |
| Test | https://api.test.palms.tennis | Тестовая среда. Тоже может очищаться и валиться. Мы ее используем как тестовый полигон перед продакшеном. Если нужно провести миграцию на проде, то мы сначала ее пробуем накатывать их на тесте, а потом, если все прошло гладко, применяем их для продакшена |
| Prod | https://api.palms.tennis | Боевой сервер. Данные с продакшена используются в приложении и показываются клиентам. Мы максимально аккуратны с этой средой, она надежна и стабильна. |

## Стандартные HTTP коды ответов

| Код | Значение |
| --- | --- |
| 200 | Все ок, ответ успешный |
| 401 | Запрос не прошел авторизацию. Проверьте ключи доступа |
| 422 | Ошибки валидации как данных, так и логические |
| 404 | Модель или роут не найден |

## Авторизация

Для авторизации запроса, нужно передать хедер Authorization с указанием `access` токен.

Например,
```
Authorization: Bearer XXXXX
```

где `XXXXX` - ваш `access` токен.

## Пейджинация

Большинство роутов получения коллекций обьектов имеют пейджинацию. Пейджинация страничная, включает два URL параметра:
- `page_size` (number) - количество элементов на страницы
- `page` (number) - номер страницы

Например

```
https://api.palms.tennis/slots?page=1&page_size=10
```

## Идентификатор устройства (обязательно)

Для всех запросов к Palms API нужно передать

```
X-Device-ID: XXXYYY
```

где `XXXYYY` - уникальный идентификатор устройства. Он будет использоваться для менеджмента ваших устройств. Мы используем этот идентификатор для менеджмента ваших подписок на Push уведомления и с целью фиксации всех ваших устройств, чтобы вы могли отменить авторизацию устройства удаленно в случае потери или кражи устройства.

## Ошибки

### Ошибка валидации

```
{
  "error": {
    "message": "Validation failed",
    "type": "validation",
    "validations": {} // ответы валидаторов для дебага
  }
}
```

### Ошибка авторизации

```
{
  "error": {
    "message": "Authentication credentials were not provided.",
    "type": "not_authenticated",
  }
}
```

и

```
{
  "error": {
    "message": "Token is invalid or expired",
    "type": "token_not_valid"
  }
}
```

### Другие ошибки

```
{
  "error": {
    "message": "Error message. Long readable text",
    "type": "error_type"
  }
}
```

## Форматы данных

### Даты

Даты хранятся в формате [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) c указанием времени и часового пояса.

Например, `2019-05-29T15:15:43+00:00`

### Валюты

Валюты мы храним в формате [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) в трех символьной строке.

Например, `USD`, `UAH`, или `EUR`.

### Суммы

Суммы мы храним целым числом без разделителя.

Например, сумма 5 грн 40 коп. будет храниться как `540`

### Номера телефонов

Согласно стандарту [E.164](https://en.wikipedia.org/wiki/E.164) в международном формате.

Например, `+380932345678`

# Group Пользователь

## Получить данные о пользователе [GET /user/me]

+ Request (appliation/json)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__User)

## Изменить данные пользователя [PATCH /user/me]

+ Request (appliation/json)
    + Attributes (Request__User__Patch)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__User)

## Изменение номера телефона 1/2. Запрос [POST /user/change_phone_number]

+ Request (application/json)
    + Attributes (Request__User__Change_Phone_Number)

+ Response 200 (application/json)
    + Attributes (Response__User__Change_Phone_Number)

## Изменение номера телефона 2/2. Подтверждение [POST /user/change_phone_number/confirm]

+ Request (application/json)
    + Attributes (Request__User__Change_Phone_Number_Confirm)

+ Response 200 (application/json)
    + Attributes (Response__User__Change_Phone_Number_Confirm)


## Facebook. Привязка учетной записи  [POST /user/socials/facebook]

+ Request (application/json)
    + Attributes (Request__User__Facebook_Attach)

+ Response 200 (application/json)
    + Attributes (Response__User__Facebook_Attach)

+ Response 403 (application/json)
    + Attributes (Response__User__Facebook_Attach__403)

+ Response 400 (application/json)
    + Attributes (Response__User__Facebook_Attach__400)

## Facebook. Удаление связи [DELETE /user/socials/facebook]

+ Request (application/json)

+ Response 200 (application/json)
    + Attributes (Response__User__Facebook_Detach)

# Group Авторизация

## Авторизация по телефон/пароль [POST /user/signin]

+ Request (application/json)
    + Attributes (Request__Auth__Signin)

+ Response 200 (application/json)
    + Attributes (Response__Auth__Signin)

## Регистрация/Авторизация с Facebook [POST /user/signin/facebook]

Это единый роут для авторизации и регистрации пользователя через Facebook. В случае регистрации нового пользователя, пользователю нужно дополнительно подтвердить номер телефона с помощью метода `/user/change_phone_number`.

+ Request (application/json)
    + Attributes (Request__Auth__Facebook)

+ Response 200 (application/json)
    + Attributes (Response__Auth__Facebook)

## Восстановление пароля 1/2. Запрос кода из СМС [POST /user/reset]

Запрашиваем код восстановления по номеру телефона. В ответе нам приходит токен, связанный с кодом отправленным в СМС. Правильная пара `otp_code` и `otp_token` позволит установить новый пароль вторым запросом.

+ Request (application/json)
    + Attributes (Request__Auth__Reset)

+ Response 200 (application/json)
    + Attributes (Response__Auth__Reset)

## Восстановление пароля 2/2. Установка нового пароля [POST /user/reset/confirm]

Запрос на установку нового пароля. Чтобы его выполнить нужно получить первым запросом `otp_token` и `otp_code` (приходит в СМС пользователю) и отправить все это вместе с новым паролем.

+ Request (application/json)
    + Attributes (Request__Auth__ResetConfirm)

+ Response 200 (application/json)
    + Attributes (Response__Auth__ResetConfirm)

## Регистрация пользователя 1/2. Запрос кода из СМС [POST /user/signup]

Запрашиваем код для регистрации по номеру телефона. В ответе нам приходит `otp_token`, связанный с `otp_code` отправленным в СМС. Правильная пара кода и токена позволит создать учетную запись вторым запросом.

+ Request (application/json)
    + Attributes (Request__Auth__Signup)

+ Response 200 (application/json)
    + Attributes (Response__Auth__Signup)

## Регистрация пользователя 2/2. Создание учетной записи [POST /user/signup/confirm]

Запрос на создание учетной записи. Чтобы его выполнить нужно получить первым запросом `otp_token` и `otp_code` (приходит в СМС пользователю) и отправить все это вместе с данными пользователя.

+ Request (application/json)
    + Attributes (Request__Auth__SignupConfirm)

+ Response 200 (application/json)
    + Attributes (Response__Auth__SignupConfirm)

## Проверка токена доступа [POST /token/verify]

+ Request (application/json)
    + Attributes (Request__Auth__Verify)

+ Response 200 (application/json)
    + Attributes (Response__Auth__Verify)

## Обновление токена доступа [POST /token/refresh]

+ Request (application/json)
    + Attributes (Request__Auth__Refresh)

+ Response 200 (application/json)
    + Attributes (Response__Auth__Refresh)


## Логаут [POST /user/logout]

В поцессе логаута мы инвалидируем токен доступа переданный нам в шапке запроса, а также деактивируем подписки на уведомления пользователя.

+ Request (appliation/json)
    + Attributes (Request__Auth__Logout)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__Auth__Logout)

# Group Клубы

**Клуб** - это бизнес, который предоставляет клиентам услуги по аренде спортивных площадок. Например, теннисных кортов.

## Получить список клубов [GET /clubs{?page_size,page}]

+ Parameters
  + page_size: 10 (number, optional) - количество записей на странице
  + page: 1 (number, optional) - номер страницы

+ Response 200 (application/json)
    + Attributes (Response__Clubs)

## Получить информацию о клубе [GET /clubs/{id}]

+ Parameters
  + id: 10 (number, required) - идентификатор клуба

+ Response 200 (application/json)
    + Attributes (Response__Club)

# Group Слоты бронирования

**Слот** - это ячейка времени на корте, которую игрок может забронировать для игры.

### Статусы

Слот бронирования может иметь ряд статусов.

| Статус | Описание |
|---|---|
| `AVAILABLE` | слот доступен для бронирования в Palms |
| `BOOKED` | слот забронирован через Palms |
| `DISABLED` | слот недоступен для бронирования |

Игроки Palms видят слоты со статусом `AVAILABLE`.
Статус `BOOKED` ставится автоматически, когда игрок бронирует слот через Palms.

## Получить список [GET /slots{?page_size,page,date_from,date_to,search,club_id}]

+ Parameters
  + page_size: 10 (number, optional) - количество записей на странице
  + page: 1 (number, optional) - номер страницы
  + date_from: `2019-05-12` (string, required) - вернуть слоты начиная с этой даты
  + date_to: `2019-05-13` (string, required) - вернуть слоты заканчивая этой датой
  + club_id: 1 (number, optional) - фильтровать по id клуба

+ Request (appliation/json)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__Slots)

## Получить слот по ID [GET /slots/{id}]

+ Parameters
  + id: 10 (number, required) - идентификатор слота бронирования

+ Request (appliation/json)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__Slot)

# Group Бронирование

**Бронирование** - заявка на игру. Она включает время, клуб, корт и цену. Это основная сущность системы и главная модель. Любая игра через Palms - это бронирование.

## Получить мои бронирования [GET /user/bookings{?page_size,page,club_id}]

+ Parameters
  + page_size: 10 (number, optional) - количество записей на странице
  + page: 1 (number, optional) - номер страницы
  + club_id: 1 (number, optional) - фильтровать по id клуба

+ Request (appliation/json)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__User_Bookings)


## Забронировать слоты [PATCH /bookings/book]

+ Request (appliation/json)
    + Attributes (Request__Booking_Book)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__Booking_Book)

## Отменить бронирование [PATCH /bookings/cancel-booking]

+ Request (appliation/json)
    + Attributes (Request__Booking_Cancel)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__Booking_Cancel)

## Оплатить бронирование [POST /bookings/{id}/pay]

Пользователь может оплатить бронирование как с сохраненной картой, так и с новой.

Чтобы оплатить с сохраненной карты - передайте `card_id`, а если нужно оплатить с новой - оставьте это поле пустым.

+ Parameters
  + id: 10 (number, required) - идентификатор бронирования

+ Request (appliation/json)
    + Attributes (Request__Booking_Pay)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__Booking_Pay)

# Group Карты

**Карта** - платежная карта пользователя. Она используется для списания/оплаты средств за бронирование.

## Получить мои карты [GET /user/cards{?page_size,page}]

+ Parameters
  + page_size: 10 (number, optional) - количество записей на странице
  + page: 1 (number, optional) - номер страницы

+ Request (appliation/json)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__Cards)

## Получить свою карту по id [GET /user/cards/{id}]

+ Parameters
  + id: 10 (number, required) - идентификатор карты

+ Request (appliation/json)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__Card)

## Удалить карту [DELETE /cards/{id}]

При удалении карты мы затираем токен каты и ее нельзя больше использовать для оплат на IPSP

+ Parameters
  + id: 10 (number, required) - идентификатор карты

+ Request (appliation/json)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)

## Добавить новую карту [POST /cards]

Для добавления новой карты без оплаты услуг нужно получить `checkout_url` и использовать страницу IPSP для добавления карты. Для встраивания формы добавления в приложения можно воспользоваться Vue JS виджетом от Fondy IPSP.

+ Request (appliation/json)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__Card_Add)

# Group Платежи

**Платежи** - информация об оплатах и других финансовых транзакциях, которые Palms инициировал от имени клиента в IPSP.

## Получить мои платежи [GET /user/payments{?page_size,page}]

+ Parameters
  + page_size: 10 (number, optional) - количество записей на странице
  + page: 1 (number, optional) - номер страницы

+ Request (appliation/json)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__User_Payments)

## Получить платеж по ID [GET /payments/{id}]

+ Parameters
  + id: 10 (number, required) - идентификатор транзакции

+ Request (appliation/json)
    + Headers

        ```
        Authorization: Bearer XXXXX
        ```

+ Response 200 (application/json)
    + Attributes (Response__Payment)

# Data Structures

## Responses

### `Response__Collection`
+ meta (object)
  + pagination (object)
      + total_number: 22 (number) - общее количество сущностей
      + current_page: 1 (number) - текущая страница
      + total_pages: 2 (number) - всего страниц
      + page_size: 20 (number) - записей на страницу
+ data (array, fixed-type)

### `Response__OK`
+ data (object, fixed-type)


### `Response__Error`
+ error (object, fixed-type)
  + type: `error_type` (string) - тип ошибки
  + message: `Long error message text` (string) - длинный текст ошибки

## Auth structures

### Auth (object)
+ access: `eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTU5ODI5Mzg4LCJqdGkiOiI0NmI2OTRhOGMxNWU0NjU1YjQ5ZGYzOTMyNjFiMDQxMCIsInVzZXJfaWQiOjN9.rlhzqQ37cue97ExsGRhaOG_CZxUWYNsrfk7wGrPe4mE` (string) - токен доступ
+ refresh: `eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTU5MTM1NDU4OCwianRpIjoiYzZkNGUyMWQwNGFlNDIxNGI1YzY2ODJjZWVkMTljMjgiLCJ1c2VyX2lkIjozfQ.VOtlheethd4ad3yOjQYM09lI4YDDWo9UOQ94Q1r40Ws` (string) - токен получения нового токена доступа

### `Response__Auth` (Response__OK)
+ data (Auth)

### `Response__Auth__Signin` (Response__Auth)

### `Request__Auth__Signin` (object)

+ phone_number: `+380938765432` (string, required) - номер телефона пользователя
+ password: `12345678` (string, required) - пароль

### `Request__Auth__Reset` (object)

+ phone_number: `+380938765432` (string, required) - номер телефона пользователя

### `Response__Auth__Reset` (Response__OK)
+ data
  + opt_token: `ae39fbbb5aabc65acbd3c8053c18daa1e70a3d3c` (string) - токен для восстановления пароля по коду из СМС
+ dev
  + otp_code: `4783` (string) - код из СМС. для автотестов на дев среде

### `Request__Auth__ResetConfirm` (object)
+ otp_code: `4783` (string) - код из СМС
+ opt_token: `ae39fbbb5aabc65acbd3c8053c18daa1e70a3d3c` (string) - токен для восстановления пароля по коду из СМС
+ new_password: `12345678` (string) - новый пароль пользователя

### `Response__Auth__ResetConfirm` (Response__Auth)

### `Request__Auth__Signup` (object)

+ phone_number: `+380938765432` (string, required) - номер телефона пользователя

### `Response__Auth__Signup` (Response__OK)
+ data
  + opt_token: `ae39fbbb5aabc65acbd3c8053c18daa1e70a3d3c` (string) - токен для восстановления пароля по коду из СМС
+ dev
  + otp_code: `4783` (string) - код из СМС. для автотестов на дев среде

### `Request__Auth__SignupConfirm` (object)
+ phone_number: `+380938765432` (string, required) - номер телефона пользователя
+ name: `Сергей` (string, required) - имя пользователя
+ password: `12345678` (string, required) - пароль пользователя
+ otp_code: `4783` (string, required) - код из СМС
+ opt_token: `ae39fbbb5aabc65acbd3c8053c18daa1e70a3d3c` (string, required) - токен для восстановления пароля по коду из СМС

### `Response__Auth__SignupConfirm` (Response__Auth)


### `Request__Auth__Verify` (object)
+ token: `eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTU5ODI5Mzg4LCJqdGkiOiI0NmI2OTRhOGMxNWU0NjU1YjQ5ZGYzOTMyNjFiMDQxMCIsInVzZXJfaWQiOjN9.rlhzqQ37cue97ExsGRhaOG_CZxUWYNsrfk7wGrPe4mE` (string) - access токен

### `Response__Auth__Verify` (Response__OK)

### `Request__Auth__Logout` (object)
### `Response__Auth__Logout` (Response__OK)


### `Request__Auth__Refresh` (object)
+ refresh: `eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTU5MTM1NDU4OCwianRpIjoiYzZkNGUyMWQwNGFlNDIxNGI1YzY2ODJjZWVkMTljMjgiLCJ1c2VyX2lkIjozfQ.VOtlheethd4ad3yOjQYM09lI4YDDWo9UOQ94Q1r40Ws` (string) - refresh токен получения нового токена доступа

### `Response__Auth__Refresh` (Response__Auth)

### `Request__Auth__Facebook` (object)
+ token: `ae39fbbb5aabc65acbd3c8053c18daa1e70a3d3c` (string, required) - токен доступа Facebook

### `Response__Auth__Facebook` (Response__Auth)

## Users

### User (object)
+ id: 1 (number) - идентификатор пользователя
+ phone_number: `+380938765432` (string) - номер телефона пользователя
+ name: `Сергей` (string) - имя пользователя
+ `verified_at`: `2019-06-25T23:23:23` (string) - время завершения проверки пользователя. если установлен, значит пользователь подтвредил телефон и он может пользоваться Palms.
+ `facebook_id`: `123456` (string) - id пользоваля в Facebook. Устанавливается, если клиент зарегистрировался с Facebook или вошел в привязал ее к своей учетной записи

### `Response__User` (Response__OK)
+ data (User)

### `Request__User__Patch` (object)
+ name: `Иван` (string) - новое имя пользователя

### `Request__User__Change_Phone_Number` (object)
+ phone_number: `+380938765432` (string) - номер телефона пользователя

### `Response__User__Change_Phone_Number` (Response__OK)
+ data (object)
  + opt_token: `ae39fbbb5aabc65acbd3c8053c18daa1e70a3d3c` (string, required) - токен для восстановления пароля по коду из СМС
+ dev (object)
  + otp_code: `4783` (string, required) - код из СМС

### `Request__User__Change_Phone_Number_Confirm` (object)
+ opt_token: `ae39fbbb5aabc65acbd3c8053c18daa1e70a3d3c` (string, required) - токен для восстановления пароля по коду из СМС
+ otp_code: `4783` (string, required) - код из СМС

### `Response__User__Change_Phone_Number_Confirm` (Response__OK)
+ data (User)


### `Request__User__Facebook_Attach` (object)
+ token: `ae39fbbb5aabc65acbd3c8053c18daa1e70a3d3c` (string, required) - токен доступа Facebook

### `Response__User__Facebook_Attach` (Response__OK)
+ data (User)


### `Response__User__Facebook_Attach__403` (Response__Error)
+ error
  + type: `facebook_is_attached`
  + message: `This facebook account is attached to another profile`

### `Response__User__Facebook_Attach__400` (Response__Error)
+ error
  + type: `facebook_invalid_token`
  + message: `Facebook token is invalid`

### `Request__User__Facebook_Detach` (object)

### `Response__User__Facebook_Detach` (Response__OK)
+ data (User)

## Clubs

### Club (object)
+ id: 1 (number) - идентификатор клуба
+ title: `Palms club` (string) - название клуба
+ subtitle: `Теннисный клуб` (string) - видовое описание клуба
+ description: `На линии корта сомкнулись ракетки, Хотелось бы форхенд, но мяч попал в сетку` (string) - описание клуба. Что он говорит о себе
+ prices: `Форматированный текст в markdown с ценами клуба` (string) - форматированный текст в markdown с ценами клуба
+ working_hours_tag: `7:00 - 23:00 без выходных` (string) - короткая строка с режимом работы клуба
+ pricing_tag: `270 - 530 грн/час` (string) -
+ address_tag: `Киев, ул. Академика Ботичелли, 3А` (string) -
+ contact_phone: `+380441234567` (string) -
+ contact_phone_two: `+380987654321` (string) -
+ contact_email: `hello@palms.tennis` (string) -
+ free_services: `Описание бесплатный услуг в markdown` (string) - описание бесплатный услуг в markdown
+ additional_services: `Описание дополнительных услуг в markdown` (string) - описание дополнительных услуг в markdown
+ rules: `описание правил клуба в markdown` (string) - описание правил клуба в markdown
+ facebook_title: `Теннисный клуб "Palms"` (string) - название FB страницы клуба
+ facebook_link: `https://www.facebook.com/sasha.goreniuk` (string) - ссылка на FB страницу клуба
+ areas (array[Area]) - корты клуба

### `Response__Clubs` (Response__Collection)
+ data (array)
  + (Club)
  + (Club)
  + (Club)

### `Response__Club` (Response__OK)
+ data (Club)

## Slots

### Slot (object)
+ id: 1 (number) - идентификатор слота
+ date_from: `2019-08-23T12:23:23+00:00Z` (string) - дата и время начала слота
+ date_to: `2019-08-23T12:23:23+00:00Z` (string) - дата и время окончания слота
+ status: `AVAILABLE` (Slot_Status) - статус слота
+ price: `20000` (number) - стоимость бронирования. Целое число без запятых (20000 - 200.00)
+ currency: `UAH` (string) - валюта стоимости.
+ area (Area) - корт, к которому относится слот
+ club (Club) - корт, к которому относится слот
+ created_at: `2019-08-23T12:23:23+00:00Z` (string) - дата создания
+ updated_at: `2019-08-23T12:23:23+00:00Z` (string) - дата последнего обновления

### `Slot_Status` (enum[string])
+ AVAILABLE
+ BOOKED
+ DISABLED

### `Response__Slots` (Response__Collection)
+ data (array)
  + (Slot)
  + (Slot)
  + (Slot)

### `Response__Slot` (Response__OK)
+ data (Slot)

## Areas
### Area (object)
+ id: `1` (number) - идентификатор корта
+ title: `Корт 1` (string) - название корта
+ created_at: `2019-08-23T12:23:23+00:00Z` (string) - дата создания
+ updated_at: `2019-08-23T12:23:23+00:00Z` (string) - дата последнего обновления
+ parameters (object) - параметры корта. значения и ключи управляются из админки Palms.
    + covering_type: `hard`
    + parameter_2: `value`

### `Response__Areas` (Response__Collection)
+ data (array)
  + (Area)
  + (Area)

### `Response__Area` (Response__OK)
+ data (Area)

# Bookings

### `Booking_Status` (enum[string])
+ `REQUESTED`
+ `APPROVED`
+ `CONFIRMED`
+ `CANCELED_BY_CUSTOMER`
+ `CANCELED_BY_CLUB`
+ `OTHER`
+ `SHOWN`
+ `NOT_SHOWN`

### Booking (object)
+ id: `1` (number) - идентификатор бронирования
+ slot (Slot, optional) - слот бронирования
+ status: `CONFIRMED` (Booking_Status) - статус бронирования
+ user: `3` (number) - идентификатор пользователя
+ booking_set: `1` (number) - идентификатора букинг сета
+ created_at: `2019-05-23T10:44:01.881000+03:00` (string) - дата создания бронирования
+ reason: `it's just okay` (string, optional) - причина изменения статуса бронирования. например причина отмены
+ area (Area) - корт бронирования
+ club (Club) - клуб бронирования
+ payment (Payment) - информация об оплате бронирования

### `Response__User_Bookings` (Response__Collection)
+ data (array)
  + (Booking)
  + (Booking)

### `Response__Booking` (Response__OK)
+ data (Booking)

### `Request__Booking_Book` (object)
+ slots_list: 1,2,3,4 (array[number]) - список id слотов для бронирования

### `Response__Booking_Book` (Response__Collection)
+ data (array)
  + (Booking)
  + (Booking)
  + (Booking)
  + (Booking)

### `Request__Booking_Cancel` (object)
+ id: 1 (number, required) - id бронирования для отмены

### `Response__Booking_Cancel` (Response__Collection)
+ data (array)
  + (Booking)
  + (Booking)
  + (Booking)
  + (Booking)


### `Request__Booking_Pay` (object)
+ card_id: 1 (number, optional) - id карты для оплаты. не передавайте id оплаты новой картой

### `Response__Booking_Pay` (Response__OK)
+ data (object)
  + id: 1 (number) - идентификатор платежа
  + type: `payment` (string) - тип платежа
  + `checkout_url`: `https://fondy.com/checkout_url` (string) - адрес страницы Fondy IPSP для добавления новой карты

# Cards

### Card (object)
+ id: `1` (number) - внутренний идентификатор карты в системе Palms
+ mask: `443322*1234` (string) - маска номера карты (Fondy.masked_card)
+ bin: `443322` (string) - бин номер карты (Fondy.card_bin)
+ user_id: `1` (number) - ID пользователя - владельца карты
<!-- + token: `da39a3ee5e6b4b0d3255bfef95601890afd80709` (string) - токен карты в IPSP (Fondy.rectoken) -->
+ `expires_at`: `2019-08-10T00:00:00` (string) - время жизни карты (Fondy.rectoken_lifetime)
+ `created_at`: `2019-08-10T00:00:00` (string) - дата добавления карты
<!-- + deleted_at: `2019-08-10T00:00:00` (string) - дата удаления карты -->

### `Response__Cards` (Response__Collection)
+ data (array)
  + (Card)
  + (Card)

### `Response__Card` (Response__OK)
+ data (Card)

### `Request__Card_Add` (object)

### `Response__Card_Add` (Response__OK)
+ data (object)
  + id: 1 (number) - идентификатор платежа
  + type: `auth` (string) - тип платежа
  + `checkout_url`: `https://fondy.com/checkout_url` (string) - адрес страницы Fondy IPSP для добавления новой карты

# Payments

### `Payment_Type` (enum[string])
+ `AUTH`
+ `PAYMENT`

### `Payment_Status` (enum[string])
+ `CREATED`
+ `PROCESSING`
+ `DECLINED`
+ `APPROVED`
+ `EXPIRED`
+ `REVERSED`

### Payment (object)
+ id: `1` (number) - внутренний идентификатор платежа в системе Palms
+ type: `AUTH` (Payment_Type) - тип платежа
+ `checkout_url`: `https://fondy.com/checkout_url` (string) - адрес страницы Fondy IPSP для добавления новой карты
+ `ipsp_id`: `ipsp_id_eg_1` (string) - идентификатор платежа в платежном шлюзе
+ `ipsp_type`: `fondy` (string) - название IPSP через которых проводился платеж
+ amount: `120` (number) - сумма платежа в копейках/центах без разделителей. 120 - 1 грн 20 коп
+ currency: `UAH` (string) - валюта платежа
+ status: `CREATED` (Payment_Status) - статус транзакции
+ card (Card) - карта с которой была проведена оплата

### `Response__User_Payments` (Response__Collection)
+ data (array)
  + (Payment)
  + (Payment)

### `Response__Payment` (Response__OK)
+ data (Payment)
